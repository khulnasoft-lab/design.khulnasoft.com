# This file is basically the AutoDevops template (https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Auto-DevOps.gitlab-ci.yml)
# plus some defaults (e.g. tags).
# However, we are going to probably move to a custom build pipeline, levering pages

stages:
  - pre-build
  - build
  - test
  - deploy
  - review
  - staging
  - canary
  - production
  - incremental rollout 10%
  - incremental rollout 25%
  - incremental rollout 50%
  - incremental rollout 100%
  - performance
  - cleanup

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_MERGE_REQUEST_IID'

default:
  image: alpine:latest
  tags:
    - gitlab-org

variables:
  # TODO: Check whether these are still needed for the D-in-D jobs.
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""  # https://gitlab.com/gitlab-org/gitlab-runner/issues/4501
  # We need no review apps, as we will use pages for that. Can be removed after migration away from AutoDevops
  REVIEW_DISABLED: "true"
  ROLLOUT_RESOURCE_TYPE: deployment


include:
  # These templates can be removed once we switch away from AutoDevOps to pages
  - template: Jobs/Build.latest.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Build.latest.gitlab-ci.yml
  - template: Jobs/Container-Scanning.latest.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Container-Scanning.latest.gitlab-ci.yml
  - template: Jobs/Deploy.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Deploy.gitlab-ci.yml
  # These templates we should retain after the switch to pages
  - template: Jobs/Code-Quality.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Code-Quality.gitlab-ci.yml
  - template: Verify/Browser-Performance.latest.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Verify/Browser-Performance.latest.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  - template: Jobs/SAST.latest.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml
  - project: 'gitlab-org/frontend/frontend-build-images'
    file: '/semantic-release/.gitlab-ci-template.rules.yml'
  - project: gitlab-org/frontend/untamper-my-lockfile
    file: 'templates/merge_request_pipelines.yml'

#
# The following rules overwrite parts of auto-devops to make it MR-Pipeline compatible
# We can remove those once we switch over to pages-only
#
build:
  needs: []
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_MERGE_REQUEST_IID'

container_scanning:
  needs: [build]
  tags:
    - gitlab-org-docker

#
# The following rules overwrite parts of auto-devops to make it MR-Pipeline compatible
# and/or force gitlab-org-docker tags
# We should keep them, even after a switch to GitLab pages
#
browser_performance:
  needs:
    - job: pages
      optional: true
  tags:
    - gitlab-org-docker
  variables:
    #TODO: Make work for main branch
    URL: "${CI_PAGES_URL}/${PAGES_PREFIX}"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_MERGE_REQUEST_IID'

code_quality:
  needs: []
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_MERGE_REQUEST_IID'

dependency_scanning:
  needs: []

sast:
  needs: []

###
#
# Custom pipeline parts below. This is the good stuff, we want to keep and iterate on
#
###
danger-review:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:danger
  stage: pre-build
  needs: []
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: never
    - if: '$DANGER_GITLAB_API_TOKEN && $CI_MERGE_REQUEST_IID'
  script:
    - danger_id=$(echo -n ${DANGER_GITLAB_API_TOKEN} | md5sum | awk '{print $1}' | cut -c5-10)
    - danger --fail-on-errors=true --verbose --danger_id="${danger_id}"

.node-job:
  image: node:18-alpine
  needs: []
  before_script:
    - apk add --no-cache bash git
    - yarn install --frozen-lockfile

.build_cache:
  variables:
    CACHE_POLICY: pull
  cache:
    - key: cache-$CI_ENVIRONMENT_SLUG
      fallback_keys:
        - cache-pages
      paths:
        - node_modules/
      policy: $CACHE_POLICY

test:
  extends: .node-job
  stage: test
  script:
    - yarn run test

check_links:
  extends:
    - .node-job
    - .build_cache
  stage: test
  allow_failure: true
  script:
    - yarn check-links

semantic-release:
  extends: .semantic-release
  allow_failure: true
  script:
    - semantic-release --debug
  rules:
    # Only run releases on scheduled pipelines on the main branch
    # This allows us to have a weekly release cadence:
    # https://gitlab.com/gitlab-org/gitlab-services/design.gitlab.com/-/pipeline_schedules
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

pages:
  extends:
    - .node-job
    - .build_cache
  stage: deploy
  pages:
    path_prefix: "$PAGES_PREFIX"
  variables:
    CACHE_POLICY: pull-push
    ENV_NAME: "pages"
    PAGES_PREFIX: "" # no prefix by default (master)
  script:
    - apk add --no-cache gzip brotli
    - bash ./scripts/build.sh
    - ls -a public
    - echo "Pages accessible through ${CI_PAGES_URL}/${PAGES_PREFIX}"
  artifacts:
    paths:
      - public/*
  environment:
    name: $ENV_NAME
    url: "${CI_PAGES_URL}/${PAGES_PREFIX}"
  publish: public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
      variables:
        ENV_NAME: "pages-review/MR-$CI_MERGE_REQUEST_IID"
        PAGES_PREFIX: '${CI_ENVIRONMENT_SLUG}'
