# frozen_string_literal: true

URL_COMMITS = 'https://gitlab.com/gitlab-org/gitlab-services/design.gitlab.com/-/blob/main/doc/commits.md#squashing'
URL_AMEND_COMMITS = 'https://gitlab.com/gitlab-org/gitlab-services/design.gitlab.com/-/blob/main/doc/commits.md#amending'
URL_SQUASH_COMMITS = 'https://gitlab.com/gitlab-org/gitlab-services/design.gitlab.com/-/blob/main/doc/commits.md#squashing'
URL_COMMIT_TYPES = 'https://gitlab.com/gitlab-org/gitlab-services/design.gitlab.com/-/blob/main/doc/commits.md#what-types-can-i-use-for-my-commit-messages'
SEMANTIC_COMMIT_TYPES = %w[build chore ci docs feat fix perf refactor revert style test].freeze

COMMIT_SUBJECT_MAX_LENGTH = 72
COMMIT_BODY_MAX_LENGTH = 72

# Commit messages that start with one of the prefixes below won't be linted
IGNORED_COMMIT_MESSAGES = [
  'Merge branch',
  'Revert "'
].freeze

# Perform various checks against commits. We're not using
# https://github.com/jonallured/danger-commit_lint because its output is not
# very helpful, and it doesn't offer the means of ignoring merge commits.

def fail_commit(commit, message)
    fail("#{commit.sha}: #{message}") # rubocop:disable Style/SignalException
end

def warn_commit(commit, message)
  warn("#{commit.sha}: #{message}")
end

def lines_changed_in_commit(commit)
  commit.diff_parent.stats[:total][:lines]
end

def too_many_changed_lines?(commit)
  commit.diff_parent.stats[:total][:files] > 3 &&
    lines_changed_in_commit(commit) >= 30
end

def match_semantic_commit(text)
  text.match(/^(?<type>\w+)(?:\((?<scope>.+?)\))?:(?<description>.+?)$/)
end

def lint_commit(commit)
  # For now we'll ignore merge commits, as getting rid of those is a problem
  # separate from enforcing good commit messages.
  # We also ignore revert commits as they are well structured by Git already
  if commit.message.start_with?(*IGNORED_COMMIT_MESSAGES)
    return { failed: false }
  end

  ## Suggestions applied through GitLab UI are not enforced for semantics as
  ## long as the squash option is enabled.
  if commit.message.match(/^.*?\bApply\b.*?\bsuggestion\b.*?$/m) && helper.squash_mr?
    appliedSuggestion = true
    return { failed: false }
  end  

  failed = false
  subject, separator, details = commit.message.split("\n", 3)

  if subject.length > COMMIT_SUBJECT_MAX_LENGTH
    fail_commit(
      commit,
      "Commit subject must have less than #{COMMIT_SUBJECT_MAX_LENGTH} characters."
    )

    failed = true
  end

  # Warn if a suggestion commit is used and squash is not enabled.
  if commit.message.match(/^.*?\bApply\b.*?\bsuggestion\b.*?$/m) && !helper.squash_mr?
    warn_commit(
      commit,
      'Merge request has applied suggestions, but **Squash commits when merge request is accepted** is disabled. Before merging this, you should enable the squash commits option.'
    )
    
    appliedSuggestion = true
    failed = false
  end

  if subject.end_with?('.')
    fail_commit(commit, 'Commit subject must not end with a period.')
    failed = true
  end

  if separator && !separator.empty?
    fail_commit(
      commit,
      'Commit subject and body must be separated by a blank line.'
    )

    failed = true
  end

  details&.each_line do |line|
    line = line.strip

    next if line.length <= COMMIT_BODY_MAX_LENGTH

    url_size = line.scan(%r{(https?://\S+)}).sum { |(url)| url.length }

    # If the line includes a URL, we'll allow it to exceed 72 characters, but
    # only if the line _without_ the URL does not exceed this limit.
    next if line.length - url_size <= COMMIT_BODY_MAX_LENGTH

    fail_commit(
      commit,
      "Commit body must have less than #{COMMIT_BODY_MAX_LENGTH} characters per line."
    )

    failed = true
  end

  if !details && too_many_changed_lines?(commit)
    fail_commit(
      commit,
      "Commit must be [amended](#{URL_AMEND_COMMITS}) to describe changes in the commit body as it changes 30 or more lines across at least three files."
    )

    failed = true
  end

  if commit.message.match?(%r{([\w\-\/]+)?(#|!|&|%)\d+\b})
    fail_commit(
      commit,
      'Commit must use full URLs instead of short references ' \
        '(`gitlab-org/gitlab-ce#123` or `!123`), as short references are ' \
        'displayed as plain text outside of GitLab.'
    )

    failed = true
  end

  semantic_commit = match_semantic_commit(subject)

  if !semantic_commit && !appliedSuggestion
    fail_commit(commit, "Commit must meet our [Git commit message standards](#{URL_COMMITS}).")

    failed = true
  elsif semantic_commit && !appliedSuggestion && !SEMANTIC_COMMIT_TYPES.include?(semantic_commit[:type])
    warn_commit(
      commit,
      "Commit should have a [common semantic commit type](#{URL_COMMIT_TYPES})."
    )

    failed = true
  end

  { failed: failed }
end

def lint_commits(commits)
  commits_with_status = commits.map { |commit| { commit: commit }.merge(lint_commit(commit)) }

  failed = commits_with_status.any? { |commit| commit[:failed] }

  if failed
    markdown(<<~MARKDOWN)
      ## Commit message standards

      One or more commit messages do not meet our
      [Git commit message standards](#{URL_COMMITS}).
      You must either:
      - [Amend the commit messages](#{URL_AMEND_COMMITS}).
      - Edit the merge request title to comply with the standards,
      enable **Squash commits when merge request is accepted**
      and retry the `danger-review` CI job.

      **Good** commit message example:

          feat(progressbar): Improve rendering performance in Edge

          Our progressbar component was causing a lot of re-renders in Edge.
          This was caused by excessive re-rendering due to floating point errors
          in Edge's JavaScript engine.

          By utilizing the better-math library we avoid those calculation errors
          and we can achieve 120 rendering frames per second again.

      **Bad** commit message example:

          fixed progressbar

    MARKDOWN
  end

  if git.commits.length > 10
    warn(
      "Merge request has more than 10 commits. " \
        "You should [manually squash them](#{URL_SQUASH_COMMITS}) into a smaller " \
        "number, or enable **Squash commits when merge request is accepted** " \
        "and retry the `danger-review` CI job."
    )
  end

  return if helper.squash_mr?
end

def lint_mr(mr_title)
  return if mr_title.empty?

  semantic_commit = match_semantic_commit(mr_title[/\A(?i)(\[draft\]|\(draft\)|draft:)?\s?(.*)/, 2])

  if !semantic_commit
    fail(
      "Merge request title must meet our [Git commit message standards](#{URL_COMMITS}), since **Squash commits when merge request is accepted** is enabled. After you fix it, retry the `danger-review` CI job."
    )
  elsif !SEMANTIC_COMMIT_TYPES.include?(semantic_commit[:type])
    warn(
      "Merge request title should have a [common semantic commit type](#{URL_COMMIT_TYPES}). After you fix it, retry the `danger-review` CI job."
    )
  end

  if mr_title.length > COMMIT_SUBJECT_MAX_LENGTH
    fail(
      "Merge request title must have less than #{COMMIT_SUBJECT_MAX_LENGTH} characters. After you fix it, retry the `danger-review` CI job."
    )
  end

  if mr_title.end_with?('.')
    fail(
      'Merge request title must not end with a period. After you fix it, retry the `danger-review` CI job.'
    )
  end
end

if helper.squash_mr?
  lint_mr(helper.mr_title)
else
  lint_commits(git.commits)
end
